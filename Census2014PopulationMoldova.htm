<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Distribuția populației din Republica Moldova, conform RPL-2014</title>
<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<style>
body { margin: 0; padding: 0; }
#map { position: absolute; top: 0; bottom: 0; width: 100%; }
</style>
</head>
<body>
<style>
    h2,
      h3 {
        margin: 10px;
        font-size: 18px;
      }
      h3 {
        font-size: 14px;
      }
      p {
        margin: 10px;
      }
    .map-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        background: #fff;
        margin-left: 20px;
        font-family: Arial, sans-serif;
        overflow: auto;
        border-radius: 3px;
    }
    #features {
        opacity: 0.9;
        top: 0px;
        max-height: 100px;
        margin-top: 20px;

        
    }
    .legend {
        opacity: 0.9;
        background-color: #fff;
        border-radius: 3px;
        bottom: 30px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
        padding: 10px;
        position: absolute;
        right: 10px;
        z-index: 1;
    }

    .legend h4 {
        margin: 0 0 10px;
    }
    
    .legend div span {
        border-radius: 20%; /*for cycle set 50%*/
        display: inline-block;
        height: 10px;
        margin-right: 5px;
        width: 10px;
    }

    .legend2 {
        opacity: 0.9;
        background-color: #fff;
        border-radius: 3px;
        bottom: 75px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
        padding: 10px;
        position: absolute;
        left: 10px;
        z-index: 1;
    }
    .legend2 h4 {
        margin: 0 0 10px;
    }
    
</style>

<div id="map"></div>
<div id="features" class="map-overlay">
    <h2>Numărul populației </h2>
    <div id="pd"><p>Alegeți o unitate administrativă...</p></div>
</div>

<div id="nuts1-legend" class="legend">
    <h4>Persoane</h4>
   
    <div><span style="background-color: #01069E"></span>> 1.000.001 (1)</div>
    <div><b><font size="2px"><br>Sursa: </font></b><i><font size="2px"><a href="https://recensamant.statistica.md/ro">RPL-2014, BNS</a></font></i>'</div>
</div>

<div id="nuts2-legend" class="legend" style="display: none">
    <h4>Persoane</h4>
   
    <div><span style="background-color: #01069E"></span>> 1.000.001 (1)</div>
    <div><span style="background-color: #808080"></span>lipsă date (1)</div>
    <div><b><font size="2px"><br>Sursa: </font></b><i><font size="2px"><a href="https://recensamant.statistica.md/ro">RPL-2014, BNS</a></font></i>'</div>
</div>


<div id="region-legend" class="legend" style="display: none">
    <h4>Persoane</h4>
   
    <div><span style="background-color: #250D87"></span>> 900.001 (1)</div>
    <div><span style="background-color: #491470"></span>500.001 - 900.000 (1)</div>
    <div><span style="background-color: #6D1B5A"></span>150.001 - 500.000 (2)</div>
    <div><span style="background-color: #922243"></span>< 150.000 (1)</div>
    <div><span style="background-color: #808080"></span>lipsă date (1)</div>
    <div><b><font size="2px"><br>Sursa: </font></b><i><font size="2px"><a href="https://recensamant.statistica.md/ro">RPL-2014, BNS</a></font></i>'</div>
</div>

<div id="state-legend" class="legend" style="display: none">
    <h4>Persoane</h4>
    <div><span style="background-color: #6D1B5A"></span>> 150.001 (1)</div>
    <div><span style="background-color: #922243"></span>100.001 - 150.000 (6)</div>
    <div><span style="background-color: #B6292D"></span>75.001 - 100.000 (8)</div>
    <div><span style="background-color: #DA3016"></span>50.001 - 75.000 (11)</div>
    <div><span style="background-color: #FF3700"></span>< 50.000 (9)</div>
    <div><span style="background-color: #808080"></span>lipsă date (2)</div>
    <div><b><font size="2px"><br>Sursa: </font></b><i><font size="2px"><a href="https://recensamant.statistica.md/ro">RPL-2014, BNS</a></font></i>'</div>
</div>

<div id="county-legend" class="legend" style="display: none">
    <h4>Persoane</h4>
    <div><span style="background-color: #6D1B5A"></span> 100.000 (1)</div>
    <div><span style="background-color: #B6292D"></span>> 50.001 - 100.000 (1)</div>
    <div><span style="background-color: #FE5E21"></span>20.001 - 50.000 (5)</div>
    <div><span style="background-color: #FD8542"></span>10.001 - 20.000 (24)</div>
    <div><span style="background-color: #ff6d6d"></span>5.001 - 10.000 (56)</div>
    <div><span style="background-color: #FDAD64"></span>3.001 - 5.000 (130)</div>
    <div><span style="background-color: #FCD485"></span>1.501 - 3.000 (362)</div>
    <div><span style="background-color: #FCFCA7"></span>< 1.500 (318)</div>
    <div><span style="background-color: #808080"></span>lipsă date (85)</div>
    <div><b><font size="2px"><br>Sursa: </font></b><i><font size="2px"><a href="https://recensamant.statistica.md/ro">RPL-2014, BNS</a></font></i>'</div>
</div>

<div id="locality-legend" class="legend2" style="display: none">
    <h4>Persoane <i>(localități)</i></h4>
    <div><span style="background-color: #6D1B5A;border-radius: 50%;display: inline-block;height: 36px;width: 36px;margin-right: 5px;"></span>> 100.001 (1)</div>
    <div><span style="background-color: #B6292D;border-radius: 50%;display: inline-block;height: 28px;width: 28px;margin-right: 5px;"></span>50.001 - 100.000 (1)</div>
    <div><span style="background-color: #FF3700;border-radius: 50%;display: inline-block;height: 24px;width: 26px;margin-right: 5px;"></span>20.001 - 50.000 (5)</div>
    <div><span style="background-color: #FE5E21;border-radius: 50%;display: inline-block;height: 22px;width: 24px;margin-right: 5px;"></span>10.001 - 20.000 (20)</div>
    <div><span style="background-color: #FD8542;border-radius: 50%;display: inline-block;height: 20px;width: 22px;margin-right: 5px;"></span>5.001 - 10.000 (51)</div>
    <div><span style="background-color: #FDAD64;border-radius: 50%;display: inline-block;height: 18px;width: 20px;margin-right: 5px;"></span>3.001 - 5.000 (102)</div>
    <div><span style="background-color: #FCD485;border-radius: 50%;display: inline-block;height: 16px;width: 18px;margin-right: 5px;"></span>1.501 - 3.000 (305)</div>
    <div><span style="background-color: #FCFCA7;border-radius: 50%;display: inline-block;height: 14px;width: 16px;margin-right: 5px;"></span>1.001 - 1.500 (230)</div>
    <div><span style="background-color: #FDFDC4;border-radius: 50%;display: inline-block;height: 12px;width: 14px;margin-right: 5px;"></span>501 - 1.000 (332)</div>
    <div><span style="background-color: #FEFEE1;border-radius: 50%;display: inline-block;height: 10px;width: 12px;margin-right: 5px;"></span>1 - 500 (469)</div>
    <div><span style="background-color: #000000;border-radius: 50%;display: inline-block;height: 6px;width: 6px;margin-right: 5px;"></span> 0 (9)</div>
    <div><span style="background-color: #808080;border-radius: 50%;display: inline-block;height: 6px;width: 6px;margin-right: 5px;"></span>lipsă date (157)</div>
</div>

<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoibXlzaHVzcCIsImEiOiJja2lyZmtvNHgyNTZtMnFxanR1cmdxbGRlIn0.lhrPz4OIk0RNmJb2Q6S7Lg';
    const map = new mapboxgl.Map({
        container: 'map',
        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/myshusp/clomgkp5i009w01prgx844h9h', //'mapbox://styles/myshusp/clofftg2x004701r08mn86rfr'
        center: [28.167, 46.994],
        zoom: 6.13,
        minZoom: 6.13,
        // cooperativeGestures: true //Add cooperative gestures to a map
        
    });

    const zoomThreshold = 6.13;
    const zoomThreshold1 = 6.28;
    const zoomThreshold2 = 6.43;
    const zoomThreshold3 = 6.58;
    const zoomThreshold4 = 6.73;
    const zoomThreshold5 = 6.88;

    map.on('load', () => {
        // make a pointer cursor
        map.getCanvas().style.cursor = 'default';
        // define layers sources and names
        map.addSource('population', {
            'type': 'geojson',
            'data': 'https://myshusp.github.io/GisMaps/LayersData/LAU_RepublicOfMoldova.geojson'
        });

        map.addLayer(
            {
                'id': 'nuts1-population',
                'source': 'population',
                'type': 'fill',
                'minzoom': zoomThreshold,
                'maxzoom': zoomThreshold1,
                'paint': {
                    'fill-color': [
                        'interpolate',
                        ['linear'],
                        ['get', 'GROUPID'],
                        14,
                        '#01069E'
                    ],
                    'fill-opacity': 0.6,
                    'fill-outline-color':'#ffffff'
                },
                'filter': ['==', 'UNITLVLID', 1]
            },
        );

        map.addLayer(
            {
                'id': 'nuts1-population-selected',
                'source': 'population',
                'type': 'line',
                'minzoom': zoomThreshold,
                'maxzoom': zoomThreshold1,
                'paint': {
                    'line-width': 3,
                    'line-opacity': 0.6,
                    'line-color':'#ffffff'
                },
                'filter': ['all', ['==', 'UNITLVLID', 1], ['in', 'CODST', '']]
            },
        );

        // map.addLayer(
        //     {
        //         'id': 'nuts1-population-line-border',
        //         'source': 'population',
        //         'type': 'line',
        //         // 'maxzoom': zoomThreshold3,
        //         'minzoom': zoomThreshold,
        //         'paint': {
        //             'line-width': 1,
        //             'line-opacity': 0.7,
        //             'line-color':'#FFDBDB',
        //         },
        //         'filter': ['==', 'UNITLVLID', 1]
        //     },
        // );

        map.addLayer(
            {
                'id': 'nuts2-population',
                'source': 'population',
                'type': 'fill',
                'minzoom': zoomThreshold1,
                'maxzoom': zoomThreshold2,
                'paint': {
                    'fill-color': [
                        'interpolate',
                        ['linear'],
                        ['get', 'GROUPID'],
                        1,
                        '#808080',
                        14,
                        '#01069E'
                    ],
                    'fill-opacity': 0.6,
                    'fill-outline-color':'#ffffff'
                },
                'filter': ['==', 'UNITLVLID', 2]
            },
        );
        map.addLayer(
            {
                'id': 'nuts2-population-selected',
                'source': 'population',
                'type': 'line',
                'minzoom': zoomThreshold1,
                'maxzoom': zoomThreshold2,
                'paint': {
                    'line-width': 3,
                    'line-opacity': 0.6,
                    'line-color':'#ffffff'
                },
                'filter': ['all', ['==', 'UNITLVLID', 2], ['in', 'CODST', '']]
            },
        );

        map.addLayer(
            {
                'id': 'nut3-population',
                'source': 'population',
                'type': 'fill',
                'minzoom': zoomThreshold2,
                'maxzoom': zoomThreshold3,
                'paint': {
                    'fill-color': [
                        'interpolate',
                        ['linear'],
                        ['get', 'GROUPID'],
                        1,
                        '#808080',
                        10,
                        '#922243',
                        11,
                        '#6D1B5A',
                        12,
                        '#491470',
                        13,
                        '#250D87'
                    ],
                    'fill-opacity': 0.6,
                    'fill-outline-color':'#ffffff'
                },
                'filter': ['==', 'UNITLVLID', 3]
            },
        );

        map.addLayer(
            {
                'id': 'nuts3-population-selected',
                'source': 'population',
                'type': 'line',
                'minzoom': zoomThreshold2,
                'maxzoom': zoomThreshold3,
                'paint': {
                    'line-width': 3,
                    'line-opacity': 0.6,
                    'line-color':'#ffffff'
                },
                'filter': ['all', ['==', 'UNITLVLID', 3], ['in', 'CODST', '']]
            },
        );

        map.addLayer(
            {
                'id': 'nuts3-population-line-border',
                'source': 'population',
                'type': 'line',
                // 'maxzoom': zoomThreshold3,
                'minzoom': zoomThreshold3,
                'paint': {
                    'line-width': 1,
                    'line-opacity': 0.7,
                    'line-color':'black'
                },
                'filter': ['==', 'UNITLVLID', 3]
            },
        );
        
        map.addLayer(
            {
                'id': 'nuts3-population-line-border2',
                'source': 'population',
                'type': 'line',
                'maxzoom': zoomThreshold4,
                'minzoom': zoomThreshold3,
                'paint': {
                    'line-width': 1,
                    'line-opacity': 0.7,
                    'line-color':'white'
                },
                'filter': ['==', 'UNITLVLID', 3]
            },
        );

        map.addLayer(
            {
                'id': 'district-population',
                'source': 'population',
                'minzoom': zoomThreshold3,
                'maxzoom': zoomThreshold4,
                'type': 'fill',
                'paint': {
                    'fill-color': [
                        'interpolate',
                        ['linear'],
                        ['get', 'GROUPID'],
                        1,
                        '#808080',
                        7,
                        '#FF3700',
                        8,
                        '#DA3016',
                        9,
                        '#B6292D',
                        10,
                        '#922243',
                        11,
                        '#6D1B5A'
                    ],
                    'fill-opacity': 0.6,
                    'fill-outline-color':'#ffffff'
                },
                'filter': ['==', 'UNITLVLID', 4]
            },
            'nuts3-population-line-border2'
        );

        map.addLayer(
            {
                'id': 'district-population-selected',
                'source': 'population',
                'type': 'line',
                'minzoom': zoomThreshold3,
                'maxzoom': zoomThreshold4,
                'paint': {
                    'line-width': 3,
                    'line-opacity': 0.6,
                    'line-color':'white'
                },
                'filter': ['all', ['==', 'UNITLVLID', 4], ['in', 'CODST', '']]
            },
        );

        map.addLayer(
            {
                'id': 'district-population-line-border',
                'source': 'population',
                'type': 'line',
                // 'maxzoom': zoomThreshold2,
                'minzoom': zoomThreshold4,
                'paint': {
                    'line-width': 0.5,
                    'line-opacity': 0.7,
                    'line-color':'black'
                },
                'filter': ['==', 'UNITLVLID', 4]
            },
        );       

        map.addLayer(
            {
                'id': 'communes-population',
                'source': 'population',
                'minzoom': zoomThreshold4,
                // 'maxzoom': zoomThreshold5,
                'type': 'fill',
                'paint': {
                    'fill-color': [
                        'interpolate',
                        ['linear'],
                        ['get', 'GROUPID'],
                        1,
                        '#808080',
                        2,
                        '#FCFCA7',
                        3,
                        '#FCD485',
                        4,
                        '#FDAD64',
                        5,
                        '#FD8542',
                        6,
                        '#FE5E21',
                        7,
                        '#FF3700',
                        9,
                        '#B6292D',
                        11,
                        '#6D1B5A',
                    ],
                    'fill-opacity': 0.6,
                    'fill-outline-color':'#ffffff'
                },
                'filter': ['==', 'UNITLVLID', 5]
            },
            'nuts3-population-line-border',
            'district-population-line-border'
        );

        map.addLayer(
            {
                'id': 'communes-population-selected',
                'source': 'population',
                'type': 'line',
                'minzoom': zoomThreshold4,
                'maxzoom': zoomThreshold5,
                'paint': {
                    'line-width': 3,
                    'line-opacity': 0.6,
                    'line-color':'#ffffff'
                },
                'filter': ['all', ['==', 'UNITLVLID', 5], ['in', 'CODST', '']]
            },
        );

        map.addSource('locality', {
            'type': 'geojson',
            'data': 'https://myshusp.github.io/GisMaps/LayersData/Locality_RepublicOfMoldova_Point.geojson'
        });

        map.addLayer(
            {
                'id': 'locality-population',
                'source': 'locality',
                'type': 'circle',
                'minzoom': zoomThreshold5,
                'paint': {
                    'circle-radius': [
                        'interpolate',
                        ['linear'],
                        ['number', ['get', 'GROUPID']],
                        1,
                        3,
                        2,
                        3,
                        3,
                        5,
                        4,
                        6,
                        5,
                        7,
                        6,
                        8,
                        7,
                        9,
                        8,
                        10,
                        9,
                        11,
                        10,
                        12,
                        11,
                        13,
                        12,
                        14,
                        14,
                        18
                        ],
                    'circle-color': [
                        'interpolate',
                        ['linear'],
                        ['number', ['get', 'GROUPID']],
                        1, //nerecenzate
                        '#808080',
                        2, //0 locuitori
                        '#000000',
                        3, //500
                        '#FEFEE1',
                        4, //1000
                        '#FDFDC4',
                        5, //1500
                        '#FCFCA7',
                        6, //3000
                        '#FCD485',
                        7, //5000
                        '#FDAD64',
                        8, //10000
                        '#FD8542',
                        9, //20000
                        '#FE5E21',
                        10, //50000
                        '#FF3700',
                        11, //75000
                        '#DA3016',
                        12, //100000
                        '#B6292D',
                        14, //500000
                        '#6D1B5A'
                    ],
                    'circle-stroke-color': '#ffffff',
                    'circle-stroke-width': 0.7, 
                    'circle-opacity': 0.6
                },
                'filter': ['!=', 'STATID', 621] 
            },
        );

        map.addLayer(
            {
                'id': 'locality-population-selected',
                'source': 'locality',
                'type': 'circle',
                'minzoom': zoomThreshold5,
                'paint': {
                    'circle-radius': [
                        'interpolate',
                        ['linear'],
                        ['number', ['get', 'GROUPID']],
                        1,
                        3,
                        2,
                        3,
                        3,
                        5,
                        4,
                        6,
                        5,
                        7,
                        6,
                        8,
                        7,
                        9,
                        8,
                        10,
                        9,
                        11,
                        10,
                        12,
                        11,
                        13,
                        12,
                        14,
                        14,
                        18                
                        ],
                    'circle-stroke-color': '#ffffff',
                    'circle-stroke-width': 2,    
                    'circle-color': '#ffffff',
                    'circle-opacity': 0
                },
                'filter': ['all', ['!=', 'STATID', 621], ['in', 'CODST', '']]
            },
        );

                map.addLayer({
                'id': 'locality-population-labels',
                'source': 'locality',
                // 'maxzoom': zoomThreshold1,
                'minzoom': 9,
                'type': 'symbol',
                'symbol-avoid-edges': true,
                'text-allow-overlap': true,
                'symbol-placement': 'point',
                'font-scale': 100,
                'layout': {
                'text-field': ['get', 'NAME'],
                'text-variable-anchor': ['bottom-left'],
                'text-radial-offset': 1.5,
                'text-justify': 'center',
                'text-size': 12,
                'text-padding': 2,
                'text-font': ['Open Sans Regular'],
                // 'text-offset': [0.85, -1.7],
                },
                'paint': {
                "text-color": "white",
                },
                'filter': ['!=', 'STATID', 621] 
        }); 

    });
    //set legend priority
    const nuts1LegendEl = document.getElementById('nuts1-legend');
    const nuts2LegendEl = document.getElementById('nuts2-legend');
    const regionLegendEl = document.getElementById('region-legend');
    const stateLegendEl = document.getElementById('state-legend');
    const countyLegendEl = document.getElementById('county-legend');
    const localityLegendEl = document.getElementById('locality-legend');
    map.on('zoom', () => {
        if (map.getZoom() > zoomThreshold) {
            nuts1LegendEl.style.display = 'block'
            nuts2LegendEl.style.display = 'none'
            regionLegendEl.style.display = 'none';
            stateLegendEl.style.display = 'none';
            countyLegendEl.style.display = 'none';
            localityLegendEl.style.display = 'none'
        };
        if (map.getZoom() > zoomThreshold1) {
            nuts1LegendEl.style.display = 'none'
            nuts2LegendEl.style.display = 'block'
            regionLegendEl.style.display = 'none';
            stateLegendEl.style.display = 'none';
            countyLegendEl.style.display = 'none';
            localityLegendEl.style.display = 'none'
        };
        if (map.getZoom() > zoomThreshold2) {
            nuts1LegendEl.style.display = 'none'
            nuts2LegendEl.style.display = 'none'
            regionLegendEl.style.display = 'block';
            stateLegendEl.style.display = 'none';
            countyLegendEl.style.display = 'none';
            localityLegendEl.style.display = 'none'
        };
        if (map.getZoom() > zoomThreshold3) {
            nuts1LegendEl.style.display = 'none'
            nuts2LegendEl.style.display = 'none'
            regionLegendEl.style.display = 'none';
            stateLegendEl.style.display = 'block';
            countyLegendEl.style.display = 'none';
            localityLegendEl.style.display = 'none'
        };
        if (map.getZoom() > zoomThreshold4) {
            nuts1LegendEl.style.display = 'none'
            nuts2LegendEl.style.display = 'none'
            regionLegendEl.style.display = 'none';
            stateLegendEl.style.display = 'none';
            countyLegendEl.style.display = 'block';
            localityLegendEl.style.display = 'none'
        };
        if (map.getZoom() > zoomThreshold5) {
            nuts1LegendEl.style.display = 'none'
            nuts2LegendEl.style.display = 'none'
            regionLegendEl.style.display = 'none';
            stateLegendEl.style.display = 'none';
            countyLegendEl.style.display = 'block';
            localityLegendEl.style.display = 'block'
        };
    });

    
    // Add a scale control to the map
    map.addControl(new mapboxgl.ScaleControl(), 'bottom-left');
    // Add a full screen control to the map
    map.addControl(new mapboxgl.FullscreenControl());
    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());

    // change info window on mousemove
    map.on('mousemove', (event) => {
        if (map.getZoom() > 5) {
            const states = map.queryRenderedFeatures(event.point, {
                layers: ['nuts1-population' ]
            });
            const fips = states.map(
                (feature) => feature.properties.CODST
            );
            map.setFilter('nuts1-population-selected', ['all', ['==', 'UNITLVLID', 1], ['in', 'CODST', ...fips]]);
            document.getElementById('pd').innerHTML = states.length
                ? `<h3>${states[0].properties.GFANAME}</h3><p><strong><em><span style="color:red">${states[0].properties.POPULATIE_2014}</span></strong> persoane </em></p>` //.toLocaleString()
                : `<p>Alegeți o unitate administrativă...</p>`;
        };
        if (map.getZoom() > zoomThreshold1) {
            const states = map.queryRenderedFeatures(event.point, {
                layers: ['nuts2-population' ]
            });
            const fips = states.map(
                (feature) => feature.properties.CODST
            );
            map.setFilter('nuts2-population-selected', ['all', ['==', 'UNITLVLID', 2], ['in', 'CODST', ...fips]]);
            document.getElementById('pd').innerHTML = states.length
                ? `<h3>${states[0].properties.GFANAME}</h3><p><strong><em><span style="color:red">${states[0].properties.POPULATIE_2014}</span></strong> persoane </em></p>` //.toLocaleString()
                : `<p>Alegeți o unitate administrativă...</p>`;
        };
        if (map.getZoom() > zoomThreshold2) {
            const states = map.queryRenderedFeatures(event.point, {
                layers: ['nut3-population' ]
            });
            const fips = states.map(
                (feature) => feature.properties.CODST
            );
            map.setFilter('nuts3-population-selected', ['all', ['==', 'UNITLVLID', 3], ['in', 'CODST', ...fips]]);
            document.getElementById('pd').innerHTML = states.length
                ? `<h3>${states[0].properties.GFANAME}</h3><p><strong><em><span style="color:red">${states[0].properties.POPULATIE_2014}</span></strong> persoane </em></p>` //.toLocaleString()
                : `<p>Alegeți o unitate administrativă...</p>`;
        };
        if (map.getZoom() > zoomThreshold3) {
            const states = map.queryRenderedFeatures(event.point, {
                layers: ['district-population' ]
            });
            const fips = states.map(
                (feature) => feature.properties.CODST
            );
            map.setFilter('district-population-selected', ['all', ['==', 'UNITLVLID', 4], ['in', 'CODST', ...fips]]);
            document.getElementById('pd').innerHTML = states.length
                ? `<h3>${states[0].properties.GFANAME}</h3><p><strong><em><span style="color:red">${states[0].properties.POPULATIE_2014}</span></strong> persoane </em></p>` //.toLocaleString()
                : `<p>Alegeți o unitate administrativă...</p>`;
        };
        if (map.getZoom() > zoomThreshold4) {
            const states = map.queryRenderedFeatures(event.point, {
                layers: ['communes-population' ]
            });
            const fips = states.map(
                (feature) => feature.properties.CODST
            );
            map.setFilter('communes-population-selected', ['all', ['==', 'UNITLVLID', 5], ['in', 'CODST', ...fips]]);
            document.getElementById('pd').innerHTML = states.length
                ? `<h3>${states[0].properties.GFANAME}</h3><p><strong><em><span style="color:red">${states[0].properties.POPULATIE_2014}</span></strong> persoane </em></p>` //.toLocaleString()
                : `<p>Alegeți o unitate administrativă...</p>`;
        };
        if (map.getZoom() > zoomThreshold5) {
            const states = map.queryRenderedFeatures(event.point, {
                layers: ['locality-population' ]
            });
            const fips = states.map(
                (feature) => feature.properties.CODST
            );
            map.setFilter('locality-population-selected', ['all', ['!=', 'STATID', 621], ['in', 'CODST', ...fips]]);
            document.getElementById('pd').innerHTML = states.length
                ? `<h3>${states[0].properties.GFANAME}</h3><p><strong><em><span style="color:red">${states[0].properties.POPULATIE_2014}</span></strong> persoane </em></p>` //.toLocaleString()
                : `<p>Alegeți o unitate administrativă...</p>`;
        };
        
    });
    
</script>

</body>
</html>